# =============================================================================
# NGINX CONFIGURATION FOR RESTAURANT MANAGEMENT SYSTEM
# =============================================================================
# This configuration serves as an API Gateway and reverse proxy for a 
# microservices architecture with separate Customer and Staff APIs.
# 
# Architecture:
# Frontend (React) -> Nginx (8080) -> Customer API (5000) | Staff API (5001)
#                                  -> PostgreSQL Database (5432)
# =============================================================================

# Event processing configuration
events {
    # Maximum number of simultaneous connections per worker process
    # Affects performance under high load - 1024 is suitable for moderate traffic
    worker_connections 1024;
}

# HTTP server configuration block
http {
    # =============================================================================
    # RATE LIMITING CONFIGURATION
    # =============================================================================
    # Protects against DDoS and brute force attacks by limiting requests per minute
    # Uses client IP address ($binary_remote_addr) as the key for tracking
    
    # General API rate limiting: 60 requests per minute (1 req/sec average)
    # 10MB memory zone can track ~160,000 unique IP addresses
    limit_req_zone $binary_remote_addr zone=general:10m rate=60r/m;
    
    # Authentication rate limiting: 10 requests per minute (stricter for login/register)
    # Prevents brute force attacks on authentication endpoints
    limit_req_zone $binary_remote_addr zone=auth:10m rate=10r/m;
    
    # Upload rate limiting: 5 requests per minute (very strict for file uploads)
    # Prevents abuse of image upload functionality for menu items
    limit_req_zone $binary_remote_addr zone=upload:10m rate=5r/m;
    
    # =============================================================================
    # UPSTREAM SERVER DEFINITIONS
    # =============================================================================
    # Define backend server groups for load balancing and health checks
    # Docker Compose service names are used as hostnames (customer-api, staff-api)
    
    # Customer API upstream - handles customer-facing operations
    # - User registration and authentication
    # - Menu browsing and ordering
    # - Order tracking and history
    upstream customer-api {
        server customer-api:5000;  # Docker service name:port
        # Additional servers can be added here for horizontal scaling:
        # server customer-api-2:5000;
    }
    
    # Staff API upstream - handles staff and management operations  
    # - Staff authentication and scheduling
    # - Order management and fulfillment
    # - Analytics and reporting
    # - Menu administration
    upstream staff-api {
        server staff-api:5001;     # Docker service name:port
        # Additional servers can be added here for horizontal scaling:
        # server staff-api-2:5001;
    }

    # =============================================================================
    # MAIN SERVER BLOCK
    # =============================================================================
    # Handles all incoming requests on port 8080 and routes them to appropriate APIs
    server {
        # Listen on port 8080 (exposed to host via Docker)
        listen 8080;
        
        # =============================================================================
        # HEALTH CHECK ENDPOINT
        # =============================================================================
        # Docker health check endpoint - returns 200 OK when nginx is operational
        # Used by Docker Compose to monitor container health
        location /health {
            access_log off;                    # Don't log health check requests
            return 200 "healthy\n";           # Simple text response
            add_header Content-Type text/plain;
        }
        
        # =============================================================================
        # AUTHENTICATION ROUTES
        # =============================================================================
        # Handle user authentication with strict rate limiting to prevent abuse
        
        # Customer registration endpoint
        # Routes to Customer API for new customer account creation
        location /auth/register {
            # Apply authentication rate limiting with burst allowance
            # burst=3: Allow up to 3 requests immediately, then enforce rate limit
            # nodelay: Don't queue excess requests, reject immediately
            limit_req zone=auth burst=3 nodelay;
            
            # =============================================================================
            # CORS (Cross-Origin Resource Sharing) PREFLIGHT HANDLING
            # =============================================================================
            # Handle OPTIONS requests sent by browsers before actual API calls
            # This is required when frontend (port 3000) calls API (port 8080)
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';        # Allow all origins
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS'; # Allowed HTTP methods
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type'; # Allowed headers
                add_header 'Access-Control-Max-Age' 1728000;         # Cache preflight for 20 days
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;  # No Content response for preflight
            }
            
            # Proxy configuration - forward request to Customer API
            proxy_pass http://customer-api;
            proxy_set_header Host $host;                           # Preserve original host header
            proxy_set_header X-Real-IP $remote_addr;              # Client's real IP address
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # IP forwarding chain
            proxy_set_header X-Forwarded-Proto $scheme;           # Original protocol (http/https)
            
            # Add CORS headers for actual requests (non-preflight)
            # 'always' ensures headers are added even for error responses
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
        }
        
        # Customer login endpoint (default login route)
        # Routes to Customer API for customer authentication
        location /auth/login {
            # Apply authentication rate limiting with higher burst for login attempts
            # burst=5: Allow up to 5 login attempts immediately (more generous than registration)
            limit_req zone=auth burst=5 nodelay;
            
            # =============================================================================
            # CORS (Cross-Origin Resource Sharing) PREFLIGHT HANDLING
            # =============================================================================
            # Handle OPTIONS requests sent by browsers before actual API calls
            # This is required when frontend (port 3000) calls API (port 8080)
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';        # Allow all origins
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS'; # Allowed HTTP methods
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type'; # Allowed headers
                add_header 'Access-Control-Max-Age' 1728000;         # Cache preflight for 20 days
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;  # No Content response for preflight
            }
            
            # Proxy actual requests to Customer API
            proxy_pass http://customer-api;
            proxy_set_header Host $host;                           # Preserve original host
            proxy_set_header X-Real-IP $remote_addr;              # Client's real IP
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # IP chain
            proxy_set_header X-Forwarded-Proto $scheme;           # Original protocol (http/https)
            
            # Add CORS headers for actual requests (non-preflight)
            # 'always' ensures headers are added even for error responses
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
        }
        
        # Staff/Manager/Admin authentication portal
        # Routes to Staff API for employee authentication (different from customer login)
        location /auth/portal {
            # Apply same rate limiting as customer login
            limit_req zone=auth burst=5 nodelay;
            
            # CORS preflight handling for staff portal
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            # Route to Staff API's login endpoint (URL rewriting)
            # /auth/portal -> staff-api/auth/login
            proxy_pass http://staff-api/auth/login;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # CORS headers for actual staff authentication requests
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
        }
        
        # Customer profile management endpoints
        # Handles GET (view profile) and PUT (update profile) operations
        location /auth/profile {
            # CORS preflight for profile operations
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, PUT, OPTIONS'; # GET=view, PUT=update
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            # Route profile requests to Customer API
            proxy_pass http://customer-api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # CORS headers for profile operations
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, PUT, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
        }
        
        # =============================================================================
        # MENU MANAGEMENT ROUTES
        # =============================================================================
        # Two-tier menu system: Staff can manage, Customers can browse
        
        # Staff menu management (CRUD operations)
        # More specific route - must come before general /api/menu
        # Handles menu item creation, updates, deletion, and image uploads
        location /api/staff/menu {
            # Apply upload rate limiting due to image upload functionality
            # Stricter limits prevent abuse of file upload endpoints
            limit_req zone=upload burst=3 nodelay;
            
            # CORS preflight for staff menu management operations
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                # Full CRUD operations: GET=read, POST=create, PUT=update, DELETE=remove
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            # Route staff menu operations to Staff API
            proxy_pass http://staff-api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # CORS headers for staff menu management
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
        }
        
        # Customer menu browsing (read-only access)
        # General menu endpoint for customers to view available items
        location /api/menu {
            # More generous rate limiting for menu browsing (customers browse frequently)
            # burst=15: Allow 15 requests immediately for smooth browsing experience
            limit_req zone=general burst=15 nodelay;
            
            # CORS preflight for customer menu browsing
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                # Limited methods: GET=browse menu, POST=add to favorites (if implemented)
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            # Route customer menu requests to Customer API
            proxy_pass http://customer-api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # CORS headers for customer menu browsing
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
        }
        
        # =============================================================================
        # ORDER MANAGEMENT ROUTES
        # =============================================================================
        # Two-tier order system: Customers create orders, Staff manages fulfillment
        
        # Staff order management endpoints (more specific route)
        # Handles order status updates, kitchen operations, and order fulfillment
        location /orders/staff {
            # Standard rate limiting for staff operations
            limit_req zone=general burst=10 nodelay;
            
            # CORS preflight for staff order management
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                # Full CRUD: GET=view orders, POST=create, PUT=update status, DELETE=cancel
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            # Route staff order operations to Staff API
            proxy_pass http://staff-api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # CORS headers for staff order management
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
        }

        # Customer order operations (general /orders endpoint)
        # Handles customer order creation, viewing, and tracking
        location /orders {
            # Standard rate limiting for customer order operations
            limit_req zone=general burst=10 nodelay;
            
            # CORS preflight for customer order operations
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                # Full operations: GET=view orders, POST=create, PUT=update, DELETE=cancel
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            # Route customer order operations to Customer API
            proxy_pass http://customer-api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # CORS headers for customer order operations
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
        }
        
        # =============================================================================
        # STAFF API ROUTES
        # =============================================================================
        # General staff operations including scheduling, assignments, and management
        
        # Catch-all for staff API endpoints
        # Handles shift management, staff scheduling, time-off requests
        location /api/staff {
            # Standard rate limiting for staff operations
            limit_req zone=general burst=10 nodelay;
            
            # CORS preflight for general staff operations
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                # Full CRUD operations for staff management
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            # Route general staff operations to Staff API
            proxy_pass http://staff-api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # CORS headers for staff operations
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
        }
        
        # =============================================================================
        # ANALYTICS AND REPORTING
        # =============================================================================
        # Manager and admin analytics dashboard endpoints
        
        # Analytics endpoints for managers and administrators
        # Handles sales reports, staff performance metrics, and business insights
        location /api/analytics {
            # More restrictive rate limiting for analytics (computationally expensive)
            # burst=5: Lower burst allowance due to resource-intensive operations
            limit_req zone=general burst=5 nodelay;
            
            # CORS preflight for analytics operations
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                # Primarily read operations with some configuration updates
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            # Route analytics requests to Staff API (where business logic resides)
            proxy_pass http://staff-api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # CORS headers for analytics operations
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
        }
        
        # =============================================================================
        # DEFAULT FALLBACK ROUTE
        # =============================================================================
        # Catch-all route for any requests not matched by specific locations above
        # Routes to Customer API as the default (public-facing operations)
        
        location / {
            # Route all unmatched requests to Customer API
            # This includes: root path (/), static assets, and unknown endpoints
            proxy_pass http://customer-api;
            proxy_set_header Host $host;                           # Preserve host header
            proxy_set_header X-Real-IP $remote_addr;              # Client IP
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # IP forwarding chain
            # Note: No rate limiting on default route - handled by backend services
        }
    }
}